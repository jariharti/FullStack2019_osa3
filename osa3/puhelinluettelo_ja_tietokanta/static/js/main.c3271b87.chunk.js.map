{"version":3,"sources":["services/comms.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","comms","axios","get","then","response","data","newObject","post","deletedObject","delete","concat","id","status","updatedObject","put","Persons","props","persons","filter","filter_rule","name","toLowerCase","indexOf","limitVisibility","map","filtered","react_default","a","createElement","key","number","type","value","onClick","deleteName","Filter","onChange","handVisibilityChange","PersonForm","onSubmit","addName","new_name","handleNameChange","new_number","handleNumberChange","Notification","message","className","notificationMessageType","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewVisibility","_useState9","_useState10","notificationMessage","setNotificationMessage","_useState11","_useState12","setNotificationMessageType","useEffect","console","log","commsService","setTimeout","catch","error","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","person2","includes","person3","alert","window","confirm","updated_name","updates","all","n","nameObject","toString","App_Persons","persons_left","henkilot","delete_person","delete_person_by_name","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NACMA,EAAU,gCA0BDC,EAxBA,WAEb,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAsB5BL,EAnBA,SAACM,GAEd,OADgBL,IAAMM,KAAKR,EAASO,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAiB5BL,EAdA,SAACQ,GAEd,OADgBP,IAAMQ,OAAN,GAAAC,OAAgBX,EAAhB,KAAAW,OAA2BF,EAAcG,KAC1CR,KAAK,SAAAC,GAClB,OAAOA,EAASQ,UAWLZ,EAPA,SAACa,GAEd,OADgBZ,IAAMa,IAAN,GAAAJ,OAAaX,EAAb,KAAAW,OAAwBG,EAAcF,IAAME,GAC7CV,KAAK,SAAAC,GACpB,OAAOA,EAASQ,UC4LZG,EAAU,SAACC,GAEf,OAAQA,EAAMC,QAAQC,OAAO,SAAAC,GAAW,OAAoF,IAAhFA,EAAYC,KAAKC,cAAcC,QAAQN,EAAMO,gBAAgBF,iBAAuBG,IAAI,SAAAC,GAAQ,OAAIC,EAAAC,EAAAC,cAAA,KAAGC,IAAKJ,EAASL,MAAjB,OAA8BK,EAASL,KAAvC,IAA8CK,EAASK,OACvMJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASX,KAAMK,EAASL,KAAMY,MAAM,SAASC,QAASjB,EAAMkB,iBAMpEC,EAAO,SAACnB,GACZ,OACEU,EAAAC,EAAAC,cAAA,6CACwBF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOX,KAAK,6BAAoBY,MAAOhB,EAAMO,gBAAkBa,SAAUpB,EAAMqB,yBAKjHC,EAAW,SAACtB,GAChB,OACIU,EAAAC,EAAAC,cAAA,QAAMW,SAAUvB,EAAMwB,SACpBd,EAAAC,EAAAC,cAAA,wBACYF,EAAAC,EAAAC,cAAA,SAAOI,MAAOhB,EAAMyB,SAAUL,SAAUpB,EAAM0B,mBAAmBhB,EAAAC,EAAAC,cAAA,WAD7E,eAEcF,EAAAC,EAAAC,cAAA,SAAOI,MAAOhB,EAAM2B,WAAYP,SAAUpB,EAAM4B,sBAE9DlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,UAAb,kBAOJc,EAAe,SAAC7B,GACpB,OAAsB,OAAlBA,EAAM8B,QACD,KAIPpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAa/B,EAAMgC,yBACrBhC,EAAM8B,UAKEG,EAxPH,WAAM,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRjC,EADQmC,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEiBL,mBAAS,IAF1BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAERf,EAFQgB,EAAA,GAEEC,EAFFD,EAAA,GAAAE,EAGqBR,mBAAS,IAH9BS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGRhB,EAHQiB,EAAA,GAGIC,EAHJD,EAAA,GAAAE,EAI8BX,mBAAS,IAJvCY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAIRvC,EAJQwC,EAAA,GAISC,EAJTD,EAAA,GAAAE,EAKsCd,qBALtCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKTE,EALSD,EAAA,GAKYE,EALZF,EAAA,GAAAG,EAM8ClB,qBAN9CmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAMTrB,EANSsB,EAAA,GAMgBC,EANhBD,EAAA,GAUhBE,oBAAU,WACRC,QAAQC,IAAI,UACZC,IACUxE,KAAK,SAAAC,GACbqE,QAAQC,IAAI,6BAA6BtE,GACzCmD,EAAWnD,GACXgE,EAAsB,+CAGtBG,EAA2B,WAC3BK,WAAW,WACTR,EAAuB,OACtB,OAEJS,MAAM,SAAAC,GACLV,EAAsB,6FAGtBG,EAA2B,SAC3BK,WAAW,WACTR,EAAuB,MACvBG,EAA2B,UAC1B,QAEJ,IA4JH,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAcjC,QAASqB,EAAqBnB,wBAAyBA,IACrEtB,EAAAC,EAAAC,cAACoD,EAAD,CAAQzD,gBAAiBA,EAAiBc,qBATjB,SAAC4C,GAC5BjB,EAAiBiB,EAAMC,OAAOlD,UAS5BN,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACuD,EAAD,CAAY3C,QA/JA,SAACyC,GAKf,GAJAR,QAAQC,IAAI,WACZO,EAAMG,iBAGDnE,EAAQO,IAAI,SAAA6D,GAAO,OAAIA,EAAQjE,OAAOkE,SAAS7C,IAGlD,GAFAgC,QAAQC,IAAI,wEAEPzD,EAAQC,OAAO,SAAAqE,GAAO,OAAIA,EAAQnE,OAASqB,IAAU,GAAGX,SAAYa,EACvE8B,QAAQC,IAAI,oDAEZc,MAAK,GAAA9E,OAAI+B,EAAJ,4BAKH,GAFAgC,QAAQC,IAAI,yCAERe,OAAOC,QAAP,GAAAhF,OAAkB+B,EAAlB,0DAAoF,CACtFgC,QAAQC,IAAI,eAIZ,IAAIiB,EAAe,CACjBvE,KAAOH,EAAQC,OAAO,SAAA0E,GAAO,OAAIA,EAAQxE,OAASqB,IAAW,GAAGrB,KAChEU,OAAQa,EACRhC,GAAKM,EAAQC,OAAO,SAAA0E,GAAO,OAAIA,EAAQxE,OAASqB,IAAW,GAAG9B,IAGhE8D,QAAQC,IAAI,eAAeiB,GAG3BhB,EACQgB,GAAcxF,KAAK,SAAAC,GACzBqE,QAAQC,IAAI,6BAA6BtE,GACzCqE,QAAQC,IAAI,UAAUzD,GAEtBsC,EAAYtC,EAAQC,OAAO,SAAA2E,GAAG,OAAIA,EAAIlF,KAAOgF,EAAahF,KAAKD,OAAOiF,IACtEvB,EAAsB,GAAA1D,OACjB+B,EADiB,2CAAA/B,OACiCiC,IAEvD4B,EAA2B,WAC3BK,WAAW,WACTR,EAAuB,MACvBG,EAA2B,YAC1B,OAEJM,MAAM,SAAAC,GACLL,QAAQC,IAAI,mBACZN,EAAsB,kBAAA1D,OACF+B,EADE,sCAGtB8B,EAA2B,SAC3BhB,EAAYtC,EAAQC,OAAO,SAAA4E,GAAC,OAAEA,EAAEnF,KAAMgF,EAAahF,MACnDiE,WAAW,WACTR,EAAuB,MACvBG,EAA2B,UAC1B,YAQV,CAED,IAAIwB,EAAa,CACf3E,KAAMqB,EACNX,OAAQa,EACRhC,GAAI,GAAAD,OAAG+B,GAAH/B,OAAciC,GAAaqD,YAEjCvB,QAAQC,IAAI,aAAaqB,GACzBpB,EACUoB,GAAY5F,KAAK,SAAAC,GACvBqE,QAAQC,IAAI,0CAA0CtE,GACtDmD,EAAWtC,EAAQP,OAAON,IAC1BgE,EAAsB,GAAA1D,OACnB+B,EADmB,2CAGvB8B,EAA2B,WAC3BK,WAAW,WACTR,EAAuB,MACvBG,EAA2B,YAC1B,OAEHM,MAAM,SAAAC,GACLV,EAAsB,8DAAA1D,OAC0C+B,EAD1C,wBAGtB8B,EAA2B,SAC3BK,WAAW,WACTR,EAAuB,MACvBG,EAA2B,UAC1B,OAGTb,EAAW,IACXG,EAAa,KA+DmBpB,SAAUA,EAAUC,iBAnB7B,SAACuC,GACxBvB,EAAWuB,EAAMC,OAAOlD,QAkBgEW,WAAYA,EAAYC,mBAfvF,SAACqC,GAC1BpB,EAAaoB,EAAMC,OAAOlD,UAexBN,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACqE,EAAD,CAAShF,QAASA,EAASM,gBAAiBA,EAAiBW,WA7D9C,SAAC+C,GAElB,GADAR,QAAQC,IAAI,eACRe,OAAOC,QAAP,gBAAAhF,OAA+BuE,EAAMC,OAAO9D,OAChD,CACE,IAAI8E,EAAejF,EAAQC,OAAO,SAAAiF,GAAQ,OAAIA,EAAS/E,OAAS6D,EAAMC,OAAO9D,OACzEgF,EAAiBnF,EAAQC,OAAO,SAAAiF,GAAQ,OAAIA,EAAS/E,OAAS6D,EAAMC,OAAO9D,OAAO,GAClFiF,EAAwBpB,EAAMC,OAAO9D,KAEzCqD,QAAQC,IAAI,oBAAoBO,EAAMC,OAAO9D,MAC7CuD,EACUyB,GAAejG,KAAK,SAAAC,GACT,MAAbA,IACFqE,QAAQC,IAAI,6BAA6BtE,GACzCmD,EAAW2C,GACX9B,EAAsB,GAAA1D,OACjB2F,EADiB,+CAGvB9B,EAA2B,WAC3BK,WAAW,WACTR,EAAuB,MACvBG,EAA2B,YAC1B,QAGLM,MAAM,SAAAC,GACLL,QAAQC,IAAI,qBACZN,EAAsB,kBAAA1D,OACF2F,EADE,sCAGtB9B,EAA2B,SAC3BhB,EAAY2C,EAAahF,OAAO,SAAA4E,GAAC,OAAEA,EAAEnF,KAAMyF,EAAczF,MACzDiE,WAAW,WACTR,EAAuB,MACvBG,EAA2B,UAC1B,aCtKO+B,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9G,KAAK,SAAA+G,GACjCA,EAAaC","file":"static/js/main.c3271b87.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3004/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (deletedObject) => {\n  const request = axios.delete(`${baseUrl}/${deletedObject.id}`)\n  return request.then(response => {\n    return response.status;\n  })\n}\n\nconst update = (updatedObject) => {\n  const request = axios.put(`${baseUrl}/${updatedObject.id}`, updatedObject)\n  return request.then(response => {\n  return response.status;\n  })\n}\n\nexport default { getAll, create, remove, update }","/* Jari Hartikainen, 22.5.2019 */\n/* Aalto University, Course: Full Stack Web Development, Part 2: Puhelinluettelo step1...step12*/\n\nimport React, { useState, useEffect } from 'react'\nimport commsService from './services/comms'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ new_name, setNewName ] = useState('')\n  const [ new_number, setNewNumber ] = useState('')\n  const [ limitVisibility, setNewVisibility ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState()\n  const [notificationMessageType, setNotificationMessageType] = useState()\n\n\n  // get persons information during initializing\n  useEffect(() => {\n    console.log(\"getAll\")\n    commsService\n    .getAll().then(response => {\n      console.log(\"getall operation succeeded\",response)\n      setPersons(response)\n      setNotificationMessage(\n        `Phonebook information received successfully`\n      )\n      setNotificationMessageType(\"success\")\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    })\n    .catch(error => {\n      setNotificationMessage(\n        `Oops.. Something went wrong when application tried to read phonebook data from the server`\n      )\n      setNotificationMessageType(\"error\")\n      setTimeout(() => {\n        setNotificationMessage(null)\n        setNotificationMessageType(\"error\")\n      }, 5000)\n    })\n  }, [])\n\n  // add new name to phonebook\n  const addName = (event) => {\n    console.log(\"addName\")\n    event.preventDefault()\n    \n    // Test if name already in the phonebook\n    if ((persons.map(person2 => person2.name)).includes(new_name)) {\n      console.log(\"Nimi jo puhelinluettelossa, testaa seuraavaksi onko puhelinumero eri\")\n      // Test if phone number is new for the person, that already in the phonebook\n      if ((persons.filter(person3 => person3.name === new_name)[0].number) === new_number){\n        console.log(\"Nimi jo puhelinluettelossa, samoin puhelinnumero\")\n        // Both name and phone number already in the phonebook\n        alert(`${new_name} on jo luettelossa`);\n      }\n      else {\n          console.log(\"Haluat korvata vanhan numeron uudella\")\n          // ask if user wants to change phoine number for existing name\n          if (window.confirm(`${new_name} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n            console.log(\"vastasit OK\")\n\n\n            // define new person array based on giving information\n            var updated_name = {\n              name: (persons.filter(updates => updates.name === new_name))[0].name,\n              number: new_number,\n              id: (persons.filter(updates => updates.name === new_name))[0].id\n            }\n\n            console.log(\"updated_name\",updated_name)\n\n\n            commsService\n            .update(updated_name).then(response => {\n              console.log(\"update operation succeeded\",response)\n              console.log(\"persons\",persons)\n              // remove person's old information from phonebook, add a new one\n              setPersons((persons.filter(all => all.id !== updated_name.id)).concat(updated_name))\n              setNotificationMessage(\n                `${new_name}'s phone number changed succesfully to ${new_number}`\n              )\n              setNotificationMessageType(\"success\")\n              setTimeout(() => {\n                setNotificationMessage(null)\n                setNotificationMessageType(\"success\")\n              }, 5000)\n            })\n            .catch(error => {\n              console.log(\"error situation\")\n              setNotificationMessage(\n                `Unfourtunately ${new_name} data already removed from server`\n              )\n              setNotificationMessageType(\"error\")\n              setPersons((persons.filter(n=>n.id !==updated_name.id)))\n              setTimeout(() => {\n                setNotificationMessage(null)\n                setNotificationMessageType(\"error\")\n              }, 5000)\n            })\n\n\n\n          }\n      }\n    }\n  else {\n      // Add new person tho phonebook\n      var nameObject = {\n        name: new_name,\n        number: new_number,\n        id: `${new_name}${new_number}`.toString()\n      }\n      console.log(\"nameObject\",nameObject)\n      commsService\n        .create(nameObject).then(response => {\n          console.log(\"received response from create operation\",response)\n          setPersons(persons.concat(response))\n          setNotificationMessage(\n          `${new_name}'s data added succesfully to phonebook`\n         )\n         setNotificationMessageType(\"success\")\n         setTimeout(() => {\n           setNotificationMessage(null)\n           setNotificationMessageType(\"success\")\n         }, 5000)\n        })\n        .catch(error => {\n          setNotificationMessage(\n            `Oops.. Something went wrong when application tried to save ${new_name} data to the server`\n          )\n          setNotificationMessageType(\"error\")\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setNotificationMessageType(\"error\")\n          }, 5000)\n        })\n      }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // user wants to delete name from phonebook\n  const deleteName = (event) => {\n    console.log(\"delete name\")\n    if (window.confirm(`Poistetaanko ${event.target.name}`))\n    {\n      var persons_left = persons.filter(henkilot => henkilot.name !== event.target.name)\n      var delete_person = (persons.filter(henkilot => henkilot.name === event.target.name))[0]\n      var delete_person_by_name = event.target.name\n\n      console.log(\"event.target.name\",event.target.name)\n      commsService\n        .remove(delete_person).then(response => {\n          if (response === 200) {\n            console.log(\"delete operation succeeded\",response)\n            setPersons(persons_left)\n            setNotificationMessage(\n              `${delete_person_by_name}'s data removed succesfully from phonebook`\n           )\n           setNotificationMessageType(\"success\")\n           setTimeout(() => {\n             setNotificationMessage(null)\n             setNotificationMessageType(\"success\")\n           }, 5000)\n          }\n        })\n        .catch(error => {\n          console.log(\"erroe 2 situation\")\n          setNotificationMessage(\n            `Unfourtunately ${delete_person_by_name} data already removed from server`\n          )\n          setNotificationMessageType(\"error\")\n          setPersons((persons_left.filter(n=>n.id !==delete_person.id)))\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setNotificationMessageType(\"error\")\n          }, 5000)\n        })\n    }\n  }\n\n  // \"Lisää uusi\" -> user edits new name string\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  // \"Lisää uusi\" -> user edist new phone number string\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  // \"Lisää uusi\" -> user pushed \"lisää\" button\n  const handVisibilityChange = (event) => {\n    setNewVisibility(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h1>&nbsp;Puhelinluettelo</h1>\n      <Notification message={notificationMessage} notificationMessageType={notificationMessageType} />\n      <Filter limitVisibility={limitVisibility} handVisibilityChange={handVisibilityChange} />\n      <h2>&nbsp;Lisää uusi</h2>\n      <PersonForm addName={addName} new_name={new_name} handleNameChange={handleNameChange} new_number={new_number} handleNumberChange={handleNumberChange}/>\n      <h2>&nbsp;Numerot</h2>\n      <Persons persons={persons} limitVisibility={limitVisibility} deleteName = {deleteName}/>\n    </div>\n  )\n\n}\n\nconst Persons = (props) => {\n\n  return (props.persons.filter(filter_rule => filter_rule.name.toLowerCase().indexOf(props.limitVisibility.toLowerCase()) === 0)).map(filtered => <p key={filtered.name}>&nbsp;{filtered.name} {filtered.number}\n  <input type=\"button\" name={filtered.name} value=\"poista\" onClick={props.deleteName}/>\n  </p>)\n\n}\n\n\nconst Filter=(props) => {\n  return (\n    <div>\n    &nbsp;rajaa näytettäviä <input type=\"text\" name=\"rajaa näytettäviä\" value={props.limitVisibility}  onChange={props.handVisibilityChange}/>\n    </div>\n  )\n}\n\nconst PersonForm=(props) => {\n  return (\n      <form onSubmit={props.addName}>\n        <div>\n        &nbsp;nimi: <input value={props.new_name} onChange={props.handleNameChange}/><br></br>\n        &nbsp;numero: <input value={props.new_number} onChange={props.handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n      </form>\n  )\n\n}\n\nconst Notification = (props) => {\n  if (props.message === null) {\n    return null\n  }\n\n  return (\n    <div className = {props.notificationMessageType} >\n      {props.message}\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}