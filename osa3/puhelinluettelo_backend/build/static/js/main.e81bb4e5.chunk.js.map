{"version":3,"sources":["services/comms.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","comms","axios","get","then","response","newObject","post","deletedObject","delete","concat","id","Persons","props","persons","filter","filter_rule","name","toLowerCase","indexOf","limitVisibility","map","filtered","react_default","a","createElement","key","number","type","value","onClick","deleteName","Filter","onChange","handVisibilityChange","PersonForm","onSubmit","addName","new_name","handleNameChange","new_number","handleNumberChange","Notification","message","className","notificationMessageType","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewVisibility","_useState9","_useState10","notificationMessage","setNotificationMessage","_useState11","_useState12","setNotificationMessageType","useEffect","console","log","commsService","data","setTimeout","catch","error","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","nameObject","JSON","stringify","App_Persons","window","confirm","persons_left","henkilot","delete_person","delete_person_by_name","status","n","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NACMA,EAAU,eAyBDC,EAvBA,WAEb,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,KAqBnBJ,EAjBA,SAACK,GAEd,OADgBJ,IAAMK,KAAKP,EAASM,GACrBF,KAAK,SAAAC,GAAQ,OAAIA,KAenBJ,EAZA,SAACO,GAEd,OADgBN,IAAMO,OAAN,GAAAC,OAAgBV,EAAhB,KAAAU,OAA2BF,EAAcG,KAC1CP,KAAK,SAAAC,GAAQ,OAAIA,KCyI5BO,EAAU,SAACC,GAEf,OAAQA,EAAMC,QAAQC,OAAO,SAAAC,GAAW,OAAoF,IAAhFA,EAAYC,KAAKC,cAAcC,QAAQN,EAAMO,gBAAgBF,iBAAuBG,IAAI,SAAAC,GAAQ,OAAIC,EAAAC,EAAAC,cAAA,KAAGC,IAAKJ,EAASL,MAAjB,OAA8BK,EAASL,KAAvC,IAA8CK,EAASK,OACvMJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASX,KAAMK,EAASL,KAAMY,MAAM,SAASC,QAASjB,EAAMkB,iBAMpEC,EAAO,SAACnB,GACZ,OACEU,EAAAC,EAAAC,cAAA,6CACwBF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOX,KAAK,6BAAoBY,MAAOhB,EAAMO,gBAAkBa,SAAUpB,EAAMqB,yBAKjHC,EAAW,SAACtB,GAChB,OACIU,EAAAC,EAAAC,cAAA,QAAMW,SAAUvB,EAAMwB,SACpBd,EAAAC,EAAAC,cAAA,wBACYF,EAAAC,EAAAC,cAAA,SAAOI,MAAOhB,EAAMyB,SAAUL,SAAUpB,EAAM0B,mBAAmBhB,EAAAC,EAAAC,cAAA,WAD7E,eAEcF,EAAAC,EAAAC,cAAA,SAAOI,MAAOhB,EAAM2B,WAAYP,SAAUpB,EAAM4B,sBAE9DlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,UAAb,kBAOJc,EAAe,SAAC7B,GACpB,OAAsB,OAAlBA,EAAM8B,QACD,KAIPpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAa/B,EAAMgC,yBACrBhC,EAAM8B,UAKEG,EA9LH,WAAM,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRjC,EADQmC,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEiBL,mBAAS,IAF1BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAERf,EAFQgB,EAAA,GAEEC,EAFFD,EAAA,GAAAE,EAGqBR,mBAAS,IAH9BS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGRhB,EAHQiB,EAAA,GAGIC,EAHJD,EAAA,GAAAE,EAI8BX,mBAAS,IAJvCY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAIRvC,EAJQwC,EAAA,GAISC,EAJTD,EAAA,GAAAE,EAKsCd,qBALtCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKTE,EALSD,EAAA,GAKYE,EALZF,EAAA,GAAAG,EAM8ClB,qBAN9CmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAMTrB,EANSsB,EAAA,GAMgBC,EANhBD,EAAA,GAUhBE,oBAAU,WACRC,QAAQC,IAAI,UACZC,IACUpE,KAAK,SAAAC,GACbiE,QAAQC,IAAI,6BAA6BlE,GACzC+C,EAAW/C,EAASoE,MACpBR,EAAsB,+CAGtBG,EAA2B,WAC3BM,WAAW,WACTT,EAAuB,OACtB,OAEJU,MAAM,SAAAC,GACLX,EAAsB,6FAGtBG,EAA2B,SAC3BM,WAAW,WACTT,EAAuB,MACvBG,EAA2B,UAC1B,QAEJ,IAkGH,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACoD,EAAD,CAAclC,QAASqB,EAAqBnB,wBAAyBA,IACrEtB,EAAAC,EAAAC,cAACqD,EAAD,CAAQ1D,gBAAiBA,EAAiBc,qBATjB,SAAC6C,GAC5BlB,EAAiBkB,EAAMC,OAAOnD,UAS5BN,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACwD,EAAD,CAAY5C,QArGA,SAAC0C,GACfT,QAAQC,IAAI,WACZQ,EAAMG,iBAGN,IAAIC,EAAa,CACflE,KAAMqB,EACNX,OAAQa,GAGV8B,QAAQC,IAAI,aAAaY,GACzBX,EACUW,GAAY/E,KAAK,SAAAC,GACvBiE,QAAQC,IAAI,0CAA0ClE,GAEtD+C,EAAW/C,EAASoE,MACpBR,EAAsB,GAAAvD,OACnB4B,EADmB,2CAGtB8B,EAA2B,WAC3BM,WAAW,WACTT,EAAuB,MACvBG,EAA2B,YAC1B,OAEJO,MAAM,SAAAC,GACLX,EACEmB,KAAKC,UAAUT,EAAMvE,SAASoE,OAEhCL,EAA2B,SAC3BM,WAAW,WACTT,EAAuB,MACvBG,EAA2B,UAC1B,OAEPb,EAAW,IACXG,EAAa,KAiEmBpB,SAAUA,EAAUC,iBAnB7B,SAACwC,GACxBxB,EAAWwB,EAAMC,OAAOnD,QAkBgEW,WAAYA,EAAYC,mBAfvF,SAACsC,GAC1BrB,EAAaqB,EAAMC,OAAOnD,UAexBN,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC6D,EAAD,CAASxE,QAASA,EAASM,gBAAiBA,EAAiBW,WA/D9C,SAACgD,GAElB,GADAT,QAAQC,IAAI,eACRgB,OAAOC,QAAP,gBAAA9E,OAA+BqE,EAAMC,OAAO/D,OAChD,CACE,IAAIwE,EAAe3E,EAAQC,OAAO,SAAA2E,GAAQ,OAAIA,EAASzE,OAAS8D,EAAMC,OAAO/D,OACzE0E,EAAiB7E,EAAQC,OAAO,SAAA2E,GAAQ,OAAIA,EAASzE,OAAS8D,EAAMC,OAAO/D,OAAO,GAClF2E,EAAwBb,EAAMC,OAAO/D,KAEzCqD,QAAQC,IAAI,oBAAoBQ,EAAMC,OAAO/D,MAC7CuD,EACUmB,GAAevF,KAAK,SAAAC,GAC1BiE,QAAQC,IAAI,uBAAuBlE,GACX,MAApBA,EAASwF,SACXvB,QAAQC,IAAI,6BAA6BlE,GACzCiE,QAAQC,IAAK,uCAAwCkB,GACrDrC,EAAWqC,GACXxB,EAAsB,GAAAvD,OACjBkF,EADiB,+CAGvBxB,EAA2B,WAC3BM,WAAW,WACTT,EAAuB,MACvBG,EAA2B,YAC1B,QAGLO,MAAM,SAAAC,GACLN,QAAQC,IAAI,oBAAqBK,EAAMvE,SAASoE,MAChDR,EACEmB,KAAKC,UAAUT,EAAMvE,SAASoE,OAEhCL,EAA2B,SAC3BhB,EAAYqC,EAAa1E,OAAO,SAAA+E,GAAC,OAAEA,EAAEnF,KAAMgF,EAAchF,MACzD+D,WAAW,WACTT,EAAuB,MACvBG,EAA2B,UAC1B,aC5GO2B,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtG,KAAK,SAAAuG,GACjCA,EAAaC","file":"static/js/main.e81bb4e5.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response)\n}\n\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response)\n}\n\nconst remove = (deletedObject) => {\n  const request = axios.delete(`${baseUrl}/${deletedObject.id}`)\n  return request.then(response => response)\n}\n\nconst update = (updatedObject) => {\n  const request = axios.put(`${baseUrl}/${updatedObject.id}`, updatedObject)\n  return request.then(response => {\n  return response.status;\n  })\n}\n\nexport default { getAll, create, remove, update }","/* Jari Hartikainen, 29.5.2019 */\n/* Aalto University, Course: Full Stack Web Development, Part 3: Puhelinluettelo step9...step11*/\n\nimport React, { useState, useEffect } from 'react'\nimport commsService from './services/comms'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ new_name, setNewName ] = useState('')\n  const [ new_number, setNewNumber ] = useState('')\n  const [ limitVisibility, setNewVisibility ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState()\n  const [notificationMessageType, setNotificationMessageType] = useState()\n\n\n  // get persons information during initializing\n  useEffect(() => {\n    console.log(\"getAll\")\n    commsService\n    .getAll().then(response => {\n      console.log(\"getall operation succeeded\",response)\n      setPersons(response.data)\n      setNotificationMessage(\n        `Phonebook information received successfully`\n      )\n      setNotificationMessageType(\"success\")\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    })\n    .catch(error => {\n      setNotificationMessage(\n        `Oops.. Something went wrong when application tried to read phonebook data from the server`\n      )\n      setNotificationMessageType(\"error\")\n      setTimeout(() => {\n        setNotificationMessage(null)\n        setNotificationMessageType(\"error\")\n      }, 5000)\n    })\n  }, [])\n\n  // add new name to phonebook\n  const addName = (event) => {\n    console.log(\"addName\")\n    event.preventDefault()\n    \n    // Add new person tho phonebook\n    var nameObject = {\n      name: new_name,\n      number: new_number,\n      // id: `${new_name}${new_number}`.toString()\n    }\n    console.log(\"nameObject\",nameObject)\n    commsService\n      .create(nameObject).then(response => {\n        console.log(\"received response from create operation\",response)\n        //setPersons(persons.concat(nameObject))\n        setPersons(response.data)\n        setNotificationMessage(\n        `${new_name}'s data added succesfully to phonebook`\n        )\n        setNotificationMessageType(\"success\")\n        setTimeout(() => {\n          setNotificationMessage(null)\n          setNotificationMessageType(\"success\")\n        }, 5000)\n      })\n      .catch(error => {\n        setNotificationMessage(\n          JSON.stringify(error.response.data)\n        )\n        setNotificationMessageType(\"error\")\n        setTimeout(() => {\n          setNotificationMessage(null)\n          setNotificationMessageType(\"error\")\n        }, 5000)\n      })\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // user wants to delete name from phonebook\n  const deleteName = (event) => {\n    console.log(\"delete name\")\n    if (window.confirm(`Poistetaanko ${event.target.name}`))\n    {\n      var persons_left = persons.filter(henkilot => henkilot.name !== event.target.name)\n      var delete_person = (persons.filter(henkilot => henkilot.name === event.target.name))[0]\n      var delete_person_by_name = event.target.name\n\n      console.log(\"event.target.name\",event.target.name)\n      commsService\n        .remove(delete_person).then(response => {\n          console.log(\"delete operation ...\",response)\n          if (response.status === 204) {\n            console.log(\"delete operation succeeded\",response)\n            console.log (\"response ==== 204 => persons left...\", persons_left)\n            setPersons(persons_left)\n            setNotificationMessage(\n              `${delete_person_by_name}'s data removed succesfully from phonebook`\n           )\n           setNotificationMessageType(\"success\")\n           setTimeout(() => {\n             setNotificationMessage(null)\n             setNotificationMessageType(\"success\")\n           }, 5000)\n          }\n        })\n        .catch(error => {\n          console.log(\"error 2 situation\", error.response.data)\n          setNotificationMessage(\n            JSON.stringify(error.response.data)\n          )\n          setNotificationMessageType(\"error\")\n          setPersons((persons_left.filter(n=>n.id !==delete_person.id)))\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setNotificationMessageType(\"error\")\n          }, 5000)\n        })\n    }\n  }\n\n  // \"Lisää uusi\" -> user edits new name string\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  // \"Lisää uusi\" -> user edist new phone number string\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  // \"Lisää uusi\" -> user pushed \"lisää\" button\n  const handVisibilityChange = (event) => {\n    setNewVisibility(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h1>&nbsp;Puhelinluettelo</h1>\n      <Notification message={notificationMessage} notificationMessageType={notificationMessageType} />\n      <Filter limitVisibility={limitVisibility} handVisibilityChange={handVisibilityChange} />\n      <h2>&nbsp;Lisää uusi</h2>\n      <PersonForm addName={addName} new_name={new_name} handleNameChange={handleNameChange} new_number={new_number} handleNumberChange={handleNumberChange}/>\n      <h2>&nbsp;Numerot</h2>\n      <Persons persons={persons} limitVisibility={limitVisibility} deleteName = {deleteName}/>\n    </div>\n  )\n\n}\n\nconst Persons = (props) => {\n\n  return (props.persons.filter(filter_rule => filter_rule.name.toLowerCase().indexOf(props.limitVisibility.toLowerCase()) === 0)).map(filtered => <p key={filtered.name}>&nbsp;{filtered.name} {filtered.number}\n  <input type=\"button\" name={filtered.name} value=\"poista\" onClick={props.deleteName}/>\n  </p>)\n\n}\n\n\nconst Filter=(props) => {\n  return (\n    <div>\n    &nbsp;rajaa näytettäviä <input type=\"text\" name=\"rajaa näytettäviä\" value={props.limitVisibility}  onChange={props.handVisibilityChange}/>\n    </div>\n  )\n}\n\nconst PersonForm=(props) => {\n  return (\n      <form onSubmit={props.addName}>\n        <div>\n        &nbsp;nimi: <input value={props.new_name} onChange={props.handleNameChange}/><br></br>\n        &nbsp;numero: <input value={props.new_number} onChange={props.handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n      </form>\n  )\n\n}\n\nconst Notification = (props) => {\n  if (props.message === null) {\n    return null\n  }\n\n  return (\n    <div className = {props.notificationMessageType} >\n      {props.message}\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}